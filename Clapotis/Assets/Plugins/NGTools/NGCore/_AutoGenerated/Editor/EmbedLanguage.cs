// File auto-generated by TextToCodeConverter.
namespace NGToolsEditor
{
	internal sealed class Language_english : EmbedLocale
	{
		public	Language_english() : base("english", "iVBORw0KGgoAAAANSUhEUgAAABAAAAAICAIAAAB/FOjAAAABSklEQVQYGR2QsUvDUBDGv8oTrpDhBVLIAwNmKJiCQ7q1m4JL/RMc/XccXR3r4ChUt2RLh0IzCMYtQ4UXaCEPDOSgGXzpcdPd77v77gbL18wPZPVH5YFrw66DRSSRfqADbm6XG6P3cEUbnlchofRDoRvELc9H4IDKzrXt0IN02AqM504v4Ht64oBG4fYoi1SLGpR3Sut24nKMKryOJQx2NcCyqxdCU6xKpuSLteHvHzPYvmfRiKhjHNvehgAOBp/WUou7eziEUzCDBbJfPrMQ22lHWx72tFXabGo0tmz11AOWtsxJKZ42mEfkOnIWQAk2RemPo36VJWYz0w1pkxSNXOVcEWV5KdQI05AiVHWhkwoFqYcx+ScnpjLPaTW5jGK/fpyZdaHLIQsl2zJNVnvOD8p+Vnk68u0ZvQHa1cm6eHkzKqDplYqUG0rzDyOWo4H+5tixAAAAAElFTkSuQmCC")
		{
			this.pairs.Add("Ok", "Ok");
			this.pairs.Add("Yes", "Yes");
			this.pairs.Add("No", "No");
			this.pairs.Add("Use", "Use");
			this.pairs.Add("Add", "Add");
			this.pairs.Add("Set", "Set");
			this.pairs.Add("Stop", "Stop");
			this.pairs.Add("Edit", "Edit");
			this.pairs.Add("Options", "Options");
			this.pairs.Add("Erase", "Erase");
			this.pairs.Add("Save", "Save");
			this.pairs.Add("Load", "Load");
			this.pairs.Add("Clear", "Clear");
			this.pairs.Add("Enable", "Enable");
			this.pairs.Add("Disable", "Disable");
			this.pairs.Add("Reset", "Reset");
			this.pairs.Add("Execute", "Execute");
			this.pairs.Add("Change", "Change");
			this.pairs.Add("Select", "Select");
			this.pairs.Add("Open", "Open");
			this.pairs.Add("Create", "Create");
			this.pairs.Add("Delete", "Delete");
			this.pairs.Add("Refresh", "Refresh");
			this.pairs.Add("Ping", "Ping");
			this.pairs.Add("Verbose", "Verbose");
			this.pairs.Add("RequiringConfigurationFile", "{0} requires a config file to save your settings.");
			this.pairs.Add("ShowPreferencesWindow", "Show Preferences Window to generate the config file.");
			this.pairs.Add("ContactFormWizard_Title", "Contact Form");
			this.pairs.Add("ContactFormWizard_ContactName", "Contact Name");
			this.pairs.Add("ContactFormWizard_ContactEMail", "Contact E-Mail");
			this.pairs.Add("ContactFormWizard_UnityInformation", "Unity");
			this.pairs.Add("ContactFormWizard_OSInformation", "OS");
			this.pairs.Add("ContactFormWizard_HardwareInformation", "Hardware");
			this.pairs.Add("ContactFormWizard_ComplementaryInformation", "Complementary Information");
			this.pairs.Add("ContactFormWizard_NameRequired", "A name is required.");
			this.pairs.Add("ContactFormWizard_ValidEMailRequired", "A valid E-Mail is required.");
			this.pairs.Add("ContactFormWizard_BugReportRecommendation", "Adding Unity, OS or hardware informations for a bug report is highly recommended.");
			this.pairs.Add("ContactFormWizard_PrepareTheEMail", "Prepare the E-Mail");
			this.pairs.Add("ContactFormWizard_SupportLanguagesWarning", "Please be aware, support is in english/french only!");
			this.pairs.Add("ExportSettings_Export", "Export");
			this.pairs.Add("ExportSettings_ExportSuccess", "Export is sucessful.");
			this.pairs.Add("ExportSettings_ExportFailed", "Export has failed.");
			this.pairs.Add("ImportSettings_Import", "Import");
			this.pairs.Add("ImportSettings_CantOverwriteInstance", "Can not overwrite instance.");
			this.pairs.Add("ImportSettings_ImportCompleted", "Importing settings completed.");
			this.pairs.Add("ImportSettings_ImportFailed", "Import settings has failed.");
			this.pairs.Add("ImportSettings_TypeIsUnknown", "Type \"{0}\" is unknown.");
			this.pairs.Add("ImportSettings_NoInstanceOfTypeFound", "No instance of type \"{0}\" found.");
			this.pairs.Add("Preferences_AskResetSettings", "Your settings are not up to date ({0} -> {1}). Do you want to regenerate it?");
			this.pairs.Add("Preferences_LoadedLocale", "NG Tools has loaded language \"{0}\".");
			this.pairs.Add("Preferences_GenerateConfigFile", "Generate configuration file");
			this.pairs.Add("Preferences_SaveConfigFile", "Save configuration file");
			this.pairs.Add("Preferences_ChoosePathConfigFile", "Choose the path of the configuration file.");
			this.pairs.Add("Preferences_RequiringConsoleSettings", "NGConsole requires a configuration file to save your settings.");
			this.pairs.Add("Preferences_ConfigurationFilesAvailable", "Configuration files (Refresh to force Unity to load all assets)");
			this.pairs.Add("Preferences_SharedSettings", "Shared NG Settings");
			this.pairs.Add("Preferences_ConfirmResetSharedSettingsTitle", "Reset settings");
			this.pairs.Add("Preferences_ConfirmResetSharedSettings", "Are you sure you want to reset the shared settings?");
			this.pairs.Add("Preferences_Focus", "Select");
			this.pairs.Add("Preferences_Reset", "Reset");
			this.pairs.Add("Preferences_Contact", "@ Contact");
			this.pairs.Add("Preferences_Diagnose", "Diagnose");
			this.pairs.Add("Preferences_Tips", "Tips");
			this.pairs.Add("Preferences_WarningPlayMode", "You are currently in playing mode. Stop the game to proceed.");
			this.pairs.Add("ScriptableObjectCreator_EnterAssetName", "Enter the asset name");
			this.pairs.Add("Tips_Title", "Tips");
			this.pairs.Add("Tips_Introduction", "All the things you need to know to use the full power of this console, to reach an efficiency beyond the possible!\nTo the greatest knight, the greatest horse.\nTo the greatest baker, the finest flour.\nTo the best programmer, the best console! (And debugger, of course!)");
			this.pairs.Add("Tip_Console_Title", "A console full of surprises");
			this.pairs.Add("Tip_Console_Content", "The different options <b>\"Clear\"</b>, <b>\"Clear on Play\"</b> and <b>\"Error pause\"</b> are intrinsically linked to the native console from Unity. Pressing one of these will reproduce the exact behaviour from the native console.\n\n<b>Click</b> on the <b>\"Conf\"</b> button in the top-right corner of the console to ping the current configuration file used by the console.\n<b>Double-click</b> on the <b>\"Conf\"</b> button to select it in the inspector.\n\nThe <b>\"Pref\"</b> button opens the console's settings. From there, you can <b>change the language</b>, but also generate new configuration file.\nYou can switch between your configuration files at any moment. By this way, you can easily <b>share your settings</b> with anybody, because everything reside in an <b>exportable file</b>.\n\nEach configuration file contains the list of all inputs, each one is alterable. You can manage the inputs by clicking on the button at the right of a configuration file in the console's settings.");
			this.pairs.Add("Tip_Module_Title", "Mod Hulk...");
			this.pairs.Add("Tip_Module_Content", "The fundamental base is the class <b>Module</b>. It can interact with other <b>Module</b>, inject your code and modify the behaviour of the console.\n\nMainModule is an active <b>Module</b>, displayed in the tab bar, simply drawing logs.\n\nA <b>Module</b> might also be passive, not displayed in the tab bar, while modifying the behaviour of the console.\nColorMarkersModule is passive, but adds a background color to logs with filters defined by the user.\n\nYou can create your own implementation by creating a class inheriting from <b>Module</b>.");
			this.pairs.Add("Tip_Stream_Title", "The almighty power of streams");
			this.pairs.Add("Tip_Stream_Content", "You can add, change the name and delete streams as much as you wish.\nEach stream is independent, but it can interact with others if you enable the option \"Consume logs\" displayed by a Pac-MAN button. When a log is consumed, other streams will skip it.\nNotice that the main stream is not concerned with those options, it will always receive all the incoming logs.\n\nEach stream can filter logs by its type (Normal, warning, error, exception), they are independent from filters.\n\n<b>Right-click</b> on the header of the stream to modify its name or delete it.\n<b>Middle-click</b> on the header of the stream to delete it.\nSwitch between streams by pressing <b>Ctrl + Tab</b> or <b>Ctrl + Shift + Tab</b> (Default shortcuts).\n\nYou can create your own stream by creating a class inheriting from <b>StreamLog</b>.");
			this.pairs.Add("Tip_Filter_Title", "The subtle finesse of filters");
			this.pairs.Add("Tip_Filter_Content", "Filters regulate the acceptation of incoming logs. The rule is simple: a log is refused when at least one filter rejects it.\n\nEach filter can add an action in the context menu of logs, allowing an advanced interaction with logs.\n\n<b>Right-click</b> or <b>middle-click</b> on the header of the filter to delete it.\n\nYou can create your own filter by creating a class inheriting from <b>ILogFilter</b>.");
			this.pairs.Add("Tip_Log_Title", "Toying with logs");
			this.pairs.Add("Tip_Log_Content", "Logs are what you have written or are the result of an action from Unity, you can add a context object to it (The 2nd argument in the method Debug.Log/Warning/Error).\nWhen a context object is available, an icon representing the object's type is displayed on the left of the log.\n\n<b>Left-click</b> on the log to ping the context object in the Project or Hierarchy Window.\n<b>Double left-click</b> to go to line if it has been emitted from source code or to open the file for other types.\n<b>Middle-click</b> to display/hide the stack trace when available.\n<b>Right-click</b> to open the context menu.\n\nThe configuration file contains 2 settings improving the interaction with logs. See Log->\"Force Focus On Modifier\" and Log->\"Select Object On Modifier\".\n\"Force Focus On Modifier\" forces to go to line or open the object by a <b>click</b> + <b>Modifier</b>.\n\"Select Object On Modifier\" selects the context object by a <b>click</b> + <b>Modifier</b>.\n\nIt is possible to select multiple logs with the multi-selection feature, press <b>Ctrl</b> and <b>click</b> on logs.\n\nPress <b>Ctrl + C</b> (Windows) to copy the first line of selected logs.\n<b>Double Ctrl + C</b> or <b>Ctrl + X</b> (Windows) to copy the whole content of selected logs.\n\nWhenever there is only one selected log, its content is displayed on the bottom of the console separated by a splitter bar.\n<b>Double-click</b> or <b>right-click</b> on the splitter bar to automatically adjust the height to visualise the whole log.");
			this.pairs.Add("Tip_Translation_Title", "The translation everywhere");
			this.pairs.Add("Tip_Translation_Content", "Almost everything is translatable!\nIf you want to add your own language, you are free to create a folder in <b>\"NGTools/Locales\"</b>.\nRightafter, reimport any source code to force the update of languages.\nThen open the NG Settings and voilà, here is your new language in the list!\n\nEvery translation files must have their extension ending with <b>\".txt\"</b>.\nThe format is simple, each key is separated by a new line and each line must start by a key followed by the separator \"=\" and end by the translation.\nTo add a new line in the translation, add a backslash \"\\\" followed by the char \"n\".\n\nExample:\nKey1=Lorem ipsum dolor sit amet,\nconsectetur adipiscing elit.\nKey2=Nulla convallis, diam sit amet eleifend laoreet.");
			this.pairs.Add("Tip_Tip_Title", "Tipception");
			this.pairs.Add("Tip_Tip_Content", "You can add your own tips in this window by adding keys through the method <b>TipsWindow.AddTip</b>.\nThe given key must come with 2 translations respecting the following \"Tip_{key}_Title\" and \"Tip_{key}_Content\".");
			this.pairs.Add("Console_IssueEncountered", "NG Console has encountered a problem.");
			this.pairs.Add("Console_ExportSettings", "Export settings");
			this.pairs.Add("Console_ImportSettings", "Import settings");
			this.pairs.Add("Console_AssetNotText", "Asset \"{0}\" is not a text file.");
			this.pairs.Add("Exporter", "Exporter");
			this.pairs.Add("ExportFilePath", "Export File Path");
			this.pairs.Add("OutputLogType", "Output Log Type");
			this.pairs.Add("OutputIndex", "Output Index");
			this.pairs.Add("OutputTime", "Output Time");
			this.pairs.Add("OutputContent", "Output Content");
			this.pairs.Add("OutputLogFile", "Output Log File");
			this.pairs.Add("OutputLogFileLine", "Output Log File Line");
			this.pairs.Add("OutputStackTrace", "Output Stack Trace");
			this.pairs.Add("Export", "Export");
			this.pairs.Add("FileRequired", "File is required.");
			this.pairs.Add("LogsExportedTo", "Logs exported in ");
			this.pairs.Add("DataSeparator", "Data Separator");
			this.pairs.Add("LogSeparator", "Log Separator");
			this.pairs.Add("FilterByThisContent", "Filter by this content");
			this.pairs.Add("SearchMode", "Search mode");
			this.pairs.Add("Keyword", "Keyword");
			this.pairs.Add("CaseInsensitive", "Case Insensitive");
			this.pairs.Add("CaseSensitive", "Case Sensitive");
			this.pairs.Add("WholeMatch", "Whole Match");
			this.pairs.Add("RegularExpressions", "Regular Expressions");
			this.pairs.Add("ParentObject", "Object");
			this.pairs.Add("IncludeChildren", "Include Children");
			this.pairs.Add("LastParent", "Last parent:");
			this.pairs.Add("FilterByThisObject", "Filter by this Object");
			this.pairs.Add("ByHierarchy", "By hierarchy");
			this.pairs.Add("AcceptedTypes", "Accepted types");
			this.pairs.Add("ByType", "By type");
			this.pairs.Add("GameObjectWithName", "Game Object with name");
			this.pairs.Add("FilterByThisObjectName", "Filter by this Object's name");
			this.pairs.Add("ByName", "By name");
			this.pairs.Add("ByTag", "By tag");
			this.pairs.Add("FilterByTag", "Filter by this GameObject's Tag");
			this.pairs.Add("Tag", "Game Object with tag");
			this.pairs.Add("ToggleTags", "Toggle Tags");
			this.pairs.Add("AcceptedTags", "Accepted Tags");
			this.pairs.Add("ArchiveModule_ChangeName", "Change name");
			this.pairs.Add("ArchiveModule_SetNote", "Set note");
			this.pairs.Add("ArchiveModule_ExportArchives", "Export archives");
			this.pairs.Add("ColorMarkers", "Color Markers");
			this.pairs.Add("NGSettings_ColorMarkersModule_NestedMenu", "Puts every menu items in a sub menu.");
			this.pairs.Add("NGSettings_ColorMarkersModule_DotInScrollbarByLogType", "Adds dot in scrollbar for warnings, error & exceptions.");
			this.pairs.Add("NGSettings_ColorMarkersModule_ColorBackgrounds", "Defines all available colors for logs.");
			this.pairs.Add("AddMarker", "Add marker");
			this.pairs.Add("Marker", "Marker");
			this.pairs.Add("NGSettings_MainModule_AlertOnWarning", "Blinks Compiler stream even if there is only warnings. Otherwise will only blinks on errors.");
			this.pairs.Add("MainModule_ChangeName", "Change name");
			this.pairs.Add("MainModule_ExportStream", "Export");
			this.pairs.Add("MainModule_ToggleCategory", "Is category");
			this.pairs.Add("MainModule_PauseOnLog", "Pause on any log");
			this.pairs.Add("NGSettings_MainModule_WarningColor", "Color of compile warning identifier.");
			this.pairs.Add("NGSettings_MainModule_ErrorColor", "Color of compile error identifier.");
			this.pairs.Add("NGSettings_MainModule_DisplayClearStreamButton", "Add a button to clear the stream.");
			this.pairs.Add("NGSettings_MainModule_CompactStreamsLimit", "Maximum of additional streams before moving to new line.");
			this.pairs.Add("NGSettings_MainModule_DefaultFiltersInStream", "Default filters added to a new stream.");
			this.pairs.Add("RecorderModule_NoSampleCreated", "No sample created.");
			this.pairs.Add("RecorderModule_ExportSamples", "Export samples");
			this.pairs.Add("RemoteModule_Address", "Address");
			this.pairs.Add("RemoteModule_Port", "Port");
			this.pairs.Add("RemoteModule_Connect", "Connect");
			this.pairs.Add("RemoteModule_Disconnect", "Disconnect");
			this.pairs.Add("RemoteModule_ExportStream", "Export");
			this.pairs.Add("RemoteModule_CLIUnavailable", "No commands available. CLI is disabled.");
			this.pairs.Add("RemoteModule_ClientDisconnected", "Client disconnected.");
			this.pairs.Add("CopyLine", "Copy line	Ctrl+C");
			this.pairs.Add("CopyLog", "Copy log	2xCtrl+C");
			this.pairs.Add("CopyStackTrace", "Copy stack trace");
			this.pairs.Add("CopyCurrentError", "Copy current error");
			this.pairs.Add("CopyAllErrors", "Copy all errors");
			this.pairs.Add("ExportSelection", "Export selection");
			this.pairs.Add("Time", "Time");
			this.pairs.Add("Text", "Text");
			this.pairs.Add("MaxSamples", "Max samples");
			this.pairs.Add("TimeStartMode_Time", "Time (secs since start)");
			this.pairs.Add("SampleStream_RequirePlayMode", "Require Play mode to record.");
			this.pairs.Add("SampleStream_StartMode", "Start condition");
			this.pairs.Add("SampleStream_EndMode", "End condition");
			this.pairs.Add("StreamLog_ConsumeLogTooltip", "Consume incoming log.");
			this.pairs.Add("CopyFields", "Copy snapshot data	2xCtrl+C");
			this.pairs.Add("CopyActualExplodedJSON", "Copy actual exploded JSON");
			this.pairs.Add("CopyFullExplodedJSON", "Copy full exploded JSON");
			this.pairs.Add("ViewJSON", "View full exploded JSON");
			this.pairs.Add("MultiContextsRow_ObjectNotAvailable", "Object is null.");
			this.pairs.Add("NGDraggableObject_Confirm", "NG Draggable Object will toggle symbol \"{0}\" in \"Scripting Define Symbols\".");
			this.pairs.Add("NGDraggableObject_EnableDescription", "If active, the PropertyDrawer for any Unity Object in inspector will be overriden.");
			this.pairs.Add("NGFav_ChangeSelection", "Change Selection");
			this.pairs.Add("NGFav_ChangeSelectionDescription", "Rule to replace the current selection when interacting with the favourites.");
			this.pairs.Add("NGFav_SelectModifiers", "Select Modifiers");
			this.pairs.Add("NGFav_SelectModifiersDescription", "Modifiers required to change the selection on click.");
			this.pairs.Add("NGFav_DeleteModifiers", "Delete Modifiers");
			this.pairs.Add("NGFav_DeleteModifiersDescription", "Modifiers required to delete a reference from the favorite on a click.");
			this.pairs.Add("NGFav_EraseSave", "Erase save");
			this.pairs.Add("NGFav_EraseSaveQuestion", "Confirm erase \"{0}\".");
			this.pairs.Add("NGFav_ClearSave", "Clear save");
			this.pairs.Add("NGFav_ClearSaveQuestion", "Delete all favorites inside \"{0}\".");
			this.pairs.Add("NGHierarchyEnhancer_EnableDescription", "Display your custom menus and highlights in Hierarchy window.");
			this.pairs.Add("NGHierarchyEnhancer_Margin", "Margin");
			this.pairs.Add("NGHierarchyEnhancer_MarginDescription", "Margin on the right of the toggle button in Hierarchy Window.");
			this.pairs.Add("NGHierarchyEnhancer_HoldModifiers", "Hold Modifiers");
			this.pairs.Add("NGHierarchyEnhancer_HoldModifiersDescription", "Set a mask of modifiers to hold a GameObject in Hierarchy.");
			this.pairs.Add("NGHierarchyEnhancer_SelectionHoldModifiers", "Selection Hold Modifiers");
			this.pairs.Add("NGHierarchyEnhancer_SelectionHoldModifiersDescription", "Set a mask of modifiers to hold the selection in Hierarchy, toggling will affect all.");
			this.pairs.Add("NGHierarchyEnhancer_LayersDescription", "Background colors & icons associated with a layer.");
			this.pairs.Add("NGHierarchyEnhancer_WidthPerComponent", "Width Per Component");
			this.pairs.Add("NGHierarchyEnhancer_WidthPerComponentDescription", "Defines the width per Component. Set -1 to just highlight the first found in the list below.");
			this.pairs.Add("NGHierarchyEnhancer_DrawUnityComponents", "Draw Unity Component");
			this.pairs.Add("NGHierarchyEnhancer_DrawUnityComponentsDescription", "Allows to draw Unity's native Component icon.");
			this.pairs.Add("NGHierarchyEnhancer_ComponentColorsDescription", "Custom Component Colors (Texture has a higher priority over Color)");
			this.pairs.Add("CloneComponent_Error_Title", "Clone Component");
			this.pairs.Add("CloneComponent_Error_Message", "Clone failed. Might be due to component's requirements.");
			this.pairs.Add("NGNavSelection_EnableDescription", "Selections from Hierarchy and Project windows are saved. Buttons \"Previous\" and \"Next\" on your mouse allow you to switch the current selection.");
			this.pairs.Add("NGNavSelection_MaxHistoric", "Max Historic");
			this.pairs.Add("NGNavSelection_MaxHistoricDescription", "Defines how many selections are saved.");
			this.pairs.Add("NGNavSelection_MaxDisplayHierarchy", "Max Display Hierarchy");
			this.pairs.Add("NGNavSelection_MaxDisplayHierarchyDescription", "Defines how many parents will be displayed.");
			this.pairs.Add("NGNavSelection_LastSelectionShortKey", "Last Selection Short Key");
			this.pairs.Add("NGNavSelection_LastSelectionShortKeyDescription", "Opens Last Selection window.");
			this.pairs.Add("NGNavSelection_OpenWindowsVirtualKeyCodes", "Open Windows Virtual Key Codes");
			this.pairs.Add("NGPrefs_Refresh", "Refresh");
			this.pairs.Add("NGPrefs_ClearAll", "Clear All");
			this.pairs.Add("NGPrefs_ClearAllConfirm", "All preferences are going to be erased. Do you confirm?");
			this.pairs.Add("NGPrefs_ClearList", "Clear List");
			this.pairs.Add("NGPrefs_ClearListConfirm", "The preferences below are going to be erased. Do you confirm?");
			this.pairs.Add("NGPrefs_DeletePref", "Delete Preference");
			this.pairs.Add("NGPrefs_DeletePrefConfirm", "Key \"{0}\" will be erased. Do you confirm?");
			this.pairs.Add("NGPrefs_Reset", "Reset");
			this.pairs.Add("NGPrefs_Apply", "Apply");
			this.pairs.Add("NGPrefs_Add", "Add");
			this.pairs.Add("NGPrefs_Type", "Type");
			this.pairs.Add("NGPrefs_Key", "Key");
			this.pairs.Add("NGPrefs_Value", "Value");
			this.pairs.Add("NGHierarchy_Connect", "Connect");
			this.pairs.Add("NGHierarchy_Disconnect", "Disconnect");
			this.pairs.Add("NGHierarchy_Address", "Address");
			this.pairs.Add("NGHierarchy_Port", "Port");
			this.pairs.Add("NGHierarchy_NetworkRefresh", "Network Refresh");
			this.pairs.Add("NGHierarchy_NetworkRefreshTooltip", "Interval (sec) before client sends pending packets.");
			this.pairs.Add("NGHierarchy_AutoRequestHierarchyInterval", "Auto Hierarchy Refresh");
			this.pairs.Add("NGHierarchy_AutoRequestHierarchyIntervalTooltip", "Interval (sec) between hierarchy refreshes. Set to 0 to disable.");
			this.pairs.Add("NGHierarchy_SyncTags", "Sync Tags");
			this.pairs.Add("NGHierarchy_SyncTagsTooltip", "Use target scene's tag.");
			this.pairs.Add("NGHierarchy_Latency", "Latency {0:0}");
			this.pairs.Add("NGHierarchy_SentBytes", "Sent {0} B");
			this.pairs.Add("NGHierarchy_ReceivedBytes", "Received {0} B");
			this.pairs.Add("NGHierarchy_RefreshHierarchy", "Refresh Hierarchy");
			this.pairs.Add("NGHierarchy_ResourcesNotAvailable", "Resources are not available yet.");
			this.pairs.Add("NGHierarchy_RequesttoSendCurrentBatch", "Packets are currently batched, do you want to send them?");
			this.pairs.Add("NGHierarchy_ClientDisconnected", "Client disconnected.");
			this.pairs.Add("NGRemote_NoHierarchyAvailable", "No NG Remote Hierarchy available.\n(Click here to open one)");
			this.pairs.Add("NGRemote_RequireHierarchy", "A NG R Hierarchy is required.");
			this.pairs.Add("NGRemote_NotConnected", "Not connected.");
			this.pairs.Add("NGRemote_NotConnectedTooltip", "(You need to connect via NG Remote Hierarchy. Click here, I will show you the way!)");
			this.pairs.Add("NGInspector_Inspector", "Inspector");
			this.pairs.Add("NGInspector_Batch", "Batch");
			this.pairs.Add("NGInspector_Historic", "Historic");
			this.pairs.Add("NGInspector_ComponentNotLoadedYet", "Component not loaded yet.");
			this.pairs.Add("NGInspector_Resend", "Resend");
			this.pairs.Add("NGInspector_NotAvailableYet", "Not available yet");
			this.pairs.Add("NGInspector_Refresh", "Refresh");
			this.pairs.Add("NGProject_AutoLoad", "Auto Load");
			this.pairs.Add("NGProject_Load", "Load");
			this.pairs.Add("NGCamera_Connect", "Start Camera");
			this.pairs.Add("NGCamera_Disconnect", "Stop Camera");
			this.pairs.Add("NGCamera_FPS", "FPS");
			this.pairs.Add("NGCamera_Camera", "Camera");
			this.pairs.Add("NGCamera_Modules", "Modules");
			this.pairs.Add("NGCamera_RecordDuration", "Record duration");
			this.pairs.Add("NGCamera_ExportReplay", "Export Replay");
			this.pairs.Add("NGCamera_AutoLoad", "Autoload");
			this.pairs.Add("NGCamera_CameraSettings", "Ghost Camera Settings");
			this.pairs.Add("NGCamera_Resolution", "Resolution");
			this.pairs.Add("NGCamera_Depth", "Depth");
			this.pairs.Add("NGCamera_TargetRefresh", "Target FPS");
			this.pairs.Add("NGCamera_RenderTextureFormat", "Render Texture Format");
			this.pairs.Add("NGCamera_PickGhostCameraAtCamera", "Ghost Cam Here");
			this.pairs.Add("NGCamera_PickGhostCamera", "Ghost Cam");
			this.pairs.Add("NGCamera_Cameras", "Cameras");
			this.pairs.Add("NGCamera_Position", "Position");
			this.pairs.Add("NGCamera_Rotation", "Rotation");
			this.pairs.Add("NGCamera_MoveSpeed", "Move Speed");
			this.pairs.Add("NGCamera_ZoomSpeed", "Zoom Speed");
			this.pairs.Add("NGCamera_MouseXSensitivity", "X Sensitivity");
			this.pairs.Add("NGCamera_MouseYSensitivity", "Y Sensitivity");
			this.pairs.Add("NGCamera_ClearFlags", "Clear Flags");
			this.pairs.Add("NGCamera_Background", "Background");
			this.pairs.Add("NGCamera_CullingMask", "Culling Mask");
			this.pairs.Add("NGCamera_Projection", "Projection");
			this.pairs.Add("NGCamera_FieldOfView", "Field Of View");
			this.pairs.Add("NGCamera_Size", "Size");
			this.pairs.Add("NGCamera_ClippingPlane", "Clipping Plane");
			this.pairs.Add("NGCamera_Near", "Near");
			this.pairs.Add("NGCamera_Far", "Far");
			this.pairs.Add("NGCamera_ViewportRect", "Viewport Rect");
			this.pairs.Add("NGCamera_RenderingPath", "Rendering Path");
			this.pairs.Add("NGCamera_OcclusionCulling", "Occlusion Culling");
			this.pairs.Add("NGCamera_HDR", "HDR");
			this.pairs.Add("NGCamera_TargetDisplay", "Target Display");
			this.pairs.Add("NGCamera_Anchor", "Anchor");
			this.pairs.Add("NGCamera_OpenPickerTransform", "Pick anchor");
			this.pairs.Add("NGCamera_NoStickyTransform", "No anchor");
			this.pairs.Add("ConsoleSettings_Inputs", "Inputs");
			this.pairs.Add("ConsoleSettings_General", "General");
			this.pairs.Add("ConsoleSettings_Themes", "Themes");
			this.pairs.Add("ConsoleSettings_Presets", "Presets");
			this.pairs.Add("ConsoleSettings_General_General", "General");
			this.pairs.Add("ConsoleSettings_General_Log", "Log");
			this.pairs.Add("ConsoleSettings_General_StackTrace", "Stack Trace");
			this.pairs.Add("ConsoleSettings_NullTarget", "The working NGSettings is null.");
			this.pairs.Add("ConsoleSettings_ResetConfirm", "Are you sure you want to reset these settings?");
			this.pairs.Add("Language", "Language");
			this.pairs.Add("General_AutoReplaceUnityConsole", "Automatically replaces Unity Console by NG Console when opening the console for the first time.");
			this.pairs.Add("General_Clear", "Defines the content of the button \"Clear\". Leave it empty to hide the button.");
			this.pairs.Add("General_Collapse", "Defines the content of the button \"Collapse\". Leave it empty to hide the button.");
			this.pairs.Add("General_ClearOnPlay", "Defines the content of the button \"Clear on Play\". Leave it empty to hide the button.");
			this.pairs.Add("General_ErrorPause", "Defines the content of the button \"Error Pause\". Leave it empty to hide the button.");
			this.pairs.Add("General_OpenMode", "Defines behaviour when \"Go to line\" is triggered.");
			this.pairs.Add("General_EditorExtensions", "If Open Mode is set on \"NG Console Opener\". Associates an exe to a set of extensions.");
			this.pairs.Add("General_SmoothScrolling", "Smoothly scroll down when new logs are added.");
			this.pairs.Add("General_HorizontalScrollbar", "Displays an horizontal scrollbar when log overflows.");
			this.pairs.Add("General_FilterUselessStackFrame", "Excludes frames from the stack trace based on classes inheriting from IStackFrameFilter.");
			this.pairs.Add("General_DifferentiateException", "Creates a clear separation between errors and exceptions. (Need to clear the console to update the current logs)");
			this.pairs.Add("General_DrawLogTypesInHeader", "Draws log types filtering in the header. If false, near the streams.");
			this.pairs.Add("General_MenuHeight", "Defines the height of the header bar, independant from the style.");
			this.pairs.Add("General_ConsoleBackground", "Background color of NG Console.");
			this.pairs.Add("General_MenuButtonStyle", "Style of buttons in the header bar.");
			this.pairs.Add("General_ToolbarStyle", "Style of the header bar.");
			this.pairs.Add("Log_GiveFocusToEditor", "Allows double-click on log to \"Go to line\".");
			this.pairs.Add("Log_ForceFocusOnModifier", "Force \"Go to line\" when pressing Modifier + Click. Do not use Ctrl, it interfers with Ctrl from feature multi-selection.");
			this.pairs.Add("Log_SelectObjectOnModifier", "Select the contextual object of the log when pressing Modifier + Click. Do not use Ctrl, it interfers with Ctrl from feature multi-selection.");
			this.pairs.Add("Log_Style", "Style applying to logs.");
			this.pairs.Add("Log_Height", "Height of log, independent from the style.");
			this.pairs.Add("Log_SelectedBackground", "Background color of selected logs.");
			this.pairs.Add("Log_AlwaysDisplayLogContent", "Display log's content area whether a log is selected or not.");
			this.pairs.Add("Log_EvenBackground", "Background color of even logs.");
			this.pairs.Add("Log_OddBackground", "Background color of odd logs.");
			this.pairs.Add("Log_DisplayTime", "Defines if log is time stamped.");
			this.pairs.Add("Log_TimeFormat", "Time format, fallback to 00:00:00 if format is not valid. [Default: HH:mm:ss.fff]");
			this.pairs.Add("Log_TimeStyle", "Style applying to log's time.");
			this.pairs.Add("Log_DisplayFrameCount", "Display the frame count.");
			this.pairs.Add("Log_DisplayRenderedFrameCount", "Display the rendered frame count.");
			this.pairs.Add("Log_CollapseLabelStyle", "Style applying to circle label on the right when Collapse is active.");
			this.pairs.Add("Log_ContentStyle", "Style applying to log's content under the splitter bar.");
			this.pairs.Add("StackTrace_Filters", "Filters defining if a frame must be skipped.");
			this.pairs.Add("StackTrace_Categories", "Categories.");
			this.pairs.Add("StackTrace_DisplayFilepath", "Defines if the path of the frame is displayed.");
			this.pairs.Add("StackTrace_SkipUnreachableFrame", "Skips the frame if the file is not on the disk.");
			this.pairs.Add("StackTrace_DisplayRelativeToAssets", "Displays the path relative to the Assets folder whenever it is possible.");
			this.pairs.Add("StackTrace_PingFolderOnModifier", "Ping the folder when clicking on the path.");
			this.pairs.Add("StackTrace_Style", "Style applying to frames.");
			this.pairs.Add("StackTrace_Height", "Height of a frame, indenpendent from the style.");
			this.pairs.Add("StackTrace_DisplayReturnValue", "Defines if the return type is displayed.");
			this.pairs.Add("StackTrace_IndentAfterReturnType", "Adds a tabulation after the return type if the type is smaller than 8 characters.");
			this.pairs.Add("StackTrace_ReturnValueColor", "Color of return type.");
			this.pairs.Add("StackTrace_DisplayReflectedType", "Defines if the class name is displayed.");
			this.pairs.Add("StackTrace_ReflectedTypeColor", "Color of the class name.");
			this.pairs.Add("StackTrace_MethodNameColor", "Color of method name.");
			this.pairs.Add("StackTrace_DisplayArgumentType", "Defines if arguments' type is displayed.");
			this.pairs.Add("StackTrace_ArgumentTypeColor", "Color of arguments' type.");
			this.pairs.Add("StackTrace_DisplayArgumentName", "Defines if arguments' name is displayed.");
			this.pairs.Add("StackTrace_ArgumentNameColor", "Color of arguments' name.");
			this.pairs.Add("StackTrace_IndentAfterArgument", "Adds a tabulation after the method ending parenthesis.");
			this.pairs.Add("StackTrace_FilepathColor", "Color of frame's path.");
			this.pairs.Add("StackTrace_LineColor", "Color of frame's line number.");
			this.pairs.Add("StackTrace_PreviewOffset", "Relative position from mouse's position, of the top-left corner of the preview rectangle.");
			this.pairs.Add("StackTrace_PreviewLinesBeforeStackFrame", "Number of lines above the frame's line.");
			this.pairs.Add("StackTrace_PreviewLinesAfterStackFrame", "Number of lines to display under the frame's line.");
			this.pairs.Add("StackTrace_DisplayTabAsSpaces", "Convert tabs into spaces. Set to 0 to skip conversion.");
			this.pairs.Add("StackTrace_PreviewTextColor", "Color of the text in the preview.");
			this.pairs.Add("StackTrace_PreviewLineColor", "Color of line number in the preview.");
			this.pairs.Add("StackTrace_PreviewHeight", "Height of preview line.");
			this.pairs.Add("StackTrace_Keywords", "Associates a color with a list of keywords.");
			this.pairs.Add("ConsoleSettings_InputsManager", "[DEBUG] Be careful when modifying the data!");
			this.pairs.Add("ConsoleSettings_PressAny", "Press any combination of keys/modifiers.");
			this.pairs.Add("NGSettings_ConfirmApply", "Some settings are going to be overwritten.\nDo you confirm?");
			this.pairs.Add("InputGroup_Navigation", "Navigation");
			this.pairs.Add("Input_OpenLog", "Show the stack trace");
			this.pairs.Add("Input_OpenLog_Description", "Displays the stack trace of selected logs when available.");
			this.pairs.Add("Input_CloseLog", "Hide the stack trace");
			this.pairs.Add("Input_CloseLog_Description", "Hides the stack trace of selected logs.");
			this.pairs.Add("Input_FocusTopLog", "Select the first log");
			this.pairs.Add("Input_FocusTopLog_Description", "Select the first log of the current stream.");
			this.pairs.Add("Input_FocusBottomLog", "Select the last log");
			this.pairs.Add("Input_FocusBottomLog_Description", "Select the last log of the current stream.");
			this.pairs.Add("Input_MoveUpLog", "Select the log above");
			this.pairs.Add("Input_MoveUpLog_Description", "");
			this.pairs.Add("Input_MoveDownLog", "Select the log below");
			this.pairs.Add("Input_MoveDownLog_Description", "");
			this.pairs.Add("Input_LongMoveUpLog", "Select a log upper");
			this.pairs.Add("Input_LongMoveUpLog_Description", "Select a log upper in the current stream. The leap size is defined by the setting General->\"Step Page Up Down\" in the configuration file.");
			this.pairs.Add("Input_LongMoveDownLog", "Select a log lower");
			this.pairs.Add("Input_LongMoveDownLog_Description", "Select a log lower in the current stream. The leap size is defined by setting General->\"Step Page Up Down\" in the configuration file.");
			this.pairs.Add("Input_GoToLine", "Go to line or open the context object");
			this.pairs.Add("Input_GoToLine_Description", "Go to line of the first reachable frame if the emitter is a text file, otherwise open the context object if available (Texture, image, audio file, 3D model, etc...).");
			this.pairs.Add("Input_DeleteLog", "Delete logs");
			this.pairs.Add("Input_DeleteLog_Description", "Remove selected logs from the current stream.");
			this.pairs.Add("Input_SwitchNextStream", "Switch to next stream");
			this.pairs.Add("Input_SwitchNextStream_Description", "");
			this.pairs.Add("Input_SwitchPreviousStream", "Switch to previous stream");
			this.pairs.Add("Input_SwitchPreviousStream_Description", "");
			this.pairs.Add("InputsWizard_Title", "Inputs manager");
			this.pairs.Add("InputsWizard_PressAnythingToEditCommand", "Press any key to edit the input.");
			this.pairs.Add("NGSyncFolders_EraseSave", "Erase save");
			this.pairs.Add("NGSyncFolders_EraseSaveQuestion", "Confirm erase \"{0}\".");
			this.pairs.Add("PreviewOfNFirstRows", "Preview of the first {0} rows");
			this.pairs.Add("ContentFilter", "By content");
			this.pairs.Add("HierarchyFilter", "By hierarchy");
			this.pairs.Add("MaskTypeFilter", "By type");
			this.pairs.Add("NameHierarchyFilter", "By name");
			this.pairs.Add("TagFilter", "By tag");
			this.pairs.Add("ToggleTagsFilter", "By log tags");
			this.pairs.Add("NGFav_ShortcutTooltip", "Press Shift + F{0}.");
			this.pairs.Add("General_StepPageUpDown", "Defines how many logs the focus must scroll when pressing Page Up/Down.");
		}
	}
}
